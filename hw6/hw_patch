diff --git a/.gitignore b/.gitignore
index 804ec32..10c0b01 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,3 +2,5 @@
 .mbed
 converter/test.wav
 mbed_settings.py*
+BUILD
+mbed-os
diff --git a/source/main.cpp b/source/main.cpp
index b1547fc..fc2c395 100644
--- a/source/main.cpp
+++ b/source/main.cpp
@@ -1,5 +1,10 @@
+#include "DigitalOut.h"
 #include "mbed.h"
 #include "stm32l475e_iot01_audio.h"
+#include "stm32l4xx_hal.h"
+#include <cstdint>
+#include <stdint.h>
+
 
 static uint16_t PCM_Buffer[PCM_BUFFER_LEN / 2];
 static BSP_AUDIO_Init_t MicParams;
@@ -17,6 +22,21 @@ static size_t SKIP_FIRST_EVENTS = 50;
 static size_t half_transfer_events = 0;
 static size_t transfer_complete_events = 0;
 
+DigitalOut gpioOut1(D2);
+DigitalOut gpioOut2(D3);
+
+
+
+void printTopBuffer(){
+    gpioOut1 = !gpioOut1;
+
+}
+
+void printBtmBuffer(){
+    gpioOut2 = !gpioOut2;
+}
+
+
 // callback that gets invoked when TARGET_AUDIO_BUFFER is full
 void target_audio_buffer_full() {
     // pause audio stream
@@ -35,17 +55,17 @@ void target_audio_buffer_full() {
 
     uint8_t wav_header[44] = {
         0x52, 0x49, 0x46, 0x46, // RIFF
-        fileSize & 0xff, (fileSize >> 8) & 0xff, (fileSize >> 16) & 0xff, (fileSize >> 24) & 0xff,
+        static_cast<uint8_t>(fileSize & 0xff), static_cast<uint8_t>((fileSize >> 8) & 0xff), static_cast<uint8_t>((fileSize >> 16) & 0xff), static_cast<uint8_t>((fileSize >> 24) & 0xff),
         0x57, 0x41, 0x56, 0x45, // WAVE
         0x66, 0x6d, 0x74, 0x20, // fmt
         0x10, 0x00, 0x00, 0x00, // length of format data
         0x01, 0x00, // type of format (1=PCM)
         0x01, 0x00, // number of channels
-        wavFreq & 0xff, (wavFreq >> 8) & 0xff, (wavFreq >> 16) & 0xff, (wavFreq >> 24) & 0xff,
+        static_cast<uint8_t>(wavFreq & 0xff), static_cast<uint8_t>((wavFreq >> 8) & 0xff), static_cast<uint8_t>((wavFreq >> 16) & 0xff), static_cast<uint8_t>((wavFreq >> 24) & 0xff),
         0x00, 0x7d, 0x00, 0x00, // 	(Sample Rate * BitsPerSample * Channels) / 8
         0x02, 0x00, 0x10, 0x00,
         0x64, 0x61, 0x74, 0x61, // data
-        dataSize & 0xff, (dataSize >> 8) & 0xff, (dataSize >> 16) & 0xff, (dataSize >> 24) & 0xff,
+        static_cast<uint8_t>(dataSize & 0xff), static_cast<uint8_t>((dataSize >> 8) & 0xff), static_cast<uint8_t>((dataSize >> 16) & 0xff), static_cast<uint8_t>((dataSize >> 24) & 0xff),
     };
 
     printf("Total complete events: %lu, index is %lu\n", transfer_complete_events, TARGET_AUDIO_BUFFER_IX);
@@ -70,24 +90,8 @@ void target_audio_buffer_full() {
 * @retval None
 */
 void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance) {
-    half_transfer_events++;
-    if (half_transfer_events < SKIP_FIRST_EVENTS) return;
-
-    uint32_t buffer_size = PCM_BUFFER_LEN / 2; /* Half Transfer */
-    uint32_t nb_samples = buffer_size / sizeof(int16_t); /* Bytes to Length */
-
-    if ((TARGET_AUDIO_BUFFER_IX + nb_samples) > TARGET_AUDIO_BUFFER_NB_SAMPLES) {
-        return;
-    }
-
-    /* Copy first half of PCM_Buffer from Microphones onto Fill_Buffer */
-    memcpy(((uint8_t*)TARGET_AUDIO_BUFFER) + (TARGET_AUDIO_BUFFER_IX * 2), PCM_Buffer, buffer_size);
-    TARGET_AUDIO_BUFFER_IX += nb_samples;
+    ev_queue.call(printTopBuffer);
 
-    if (TARGET_AUDIO_BUFFER_IX >= TARGET_AUDIO_BUFFER_NB_SAMPLES) {
-        ev_queue.call(&target_audio_buffer_full);
-        return;
-    }
 }
 
 /**
@@ -96,25 +100,7 @@ void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance) {
 * @retval None
 */
 void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance) {
-    transfer_complete_events++;
-    if (transfer_complete_events < SKIP_FIRST_EVENTS) return;
-
-    uint32_t buffer_size = PCM_BUFFER_LEN / 2; /* Half Transfer */
-    uint32_t nb_samples = buffer_size / sizeof(int16_t); /* Bytes to Length */
-
-    if ((TARGET_AUDIO_BUFFER_IX + nb_samples) > TARGET_AUDIO_BUFFER_NB_SAMPLES) {
-        return;
-    }
-
-    /* Copy second half of PCM_Buffer from Microphones onto Fill_Buffer */
-    memcpy(((uint8_t*)TARGET_AUDIO_BUFFER) + (TARGET_AUDIO_BUFFER_IX * 2),
-        ((uint8_t*)PCM_Buffer) + (nb_samples * 2), buffer_size);
-    TARGET_AUDIO_BUFFER_IX += nb_samples;
-
-    if (TARGET_AUDIO_BUFFER_IX >= TARGET_AUDIO_BUFFER_NB_SAMPLES) {
-        ev_queue.call(&target_audio_buffer_full);
-        return;
-    }
+    ev_queue.call(printBtmBuffer);
 }
 
 /**
@@ -167,7 +153,8 @@ int main() {
         printf("Failed to allocate TARGET_AUDIO_BUFFER buffer\n");
         return 0;
     }
-
+    gpioOut1 = 0;
+    gpioOut2 = 1;
     // set up the microphone
     MicParams.BitsPerSample = 16;
     MicParams.ChannelsNbr = AUDIO_CHANNELS;
@@ -178,10 +165,10 @@ int main() {
     int32_t ret = BSP_AUDIO_IN_Init(AUDIO_INSTANCE, &MicParams);
 
     if (ret != BSP_ERROR_NONE) {
-        printf("Error Audio Init (%ld)\r\n", ret);
+        printf("Error Audio Init (%d)\r\n", ret);
         return 1;
     } else {
-        printf("OK Audio Init\t(Audio Freq=%ld)\r\n", AUDIO_SAMPLING_FREQUENCY);
+        printf("OK Audio Init\t(Audio Freq=%d)\r\n", AUDIO_SAMPLING_FREQUENCY);
     }
 
     printf("Press the BLUE button to record a message\n");
